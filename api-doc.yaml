swagger: "2.0"
info:
  description: "REST-API documentation for OPTIMISE MS"
  version: "1.0.0"
  title: "OPTIMISE MS REST-API"
  contact:
    email: "c.sou16@imperial.ac.uk"
  license:
    name: "MIT Licence"
host: "localhost:3000"
basePath: "/"
paths:
  /internalapi/userlogin:
    post:
      summary: "User login"
      parameters:
      - in: "body"
        name: "body"
        description: "User log-in credentials"
        required: true
        schema:
          $ref: "#/definitions/Login"
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  token:
                    type: "string"
                    description: "A token."
        400:
          description: "Please provide 'username' and 'pw'."
        401:
          description: "Cannot find this user" "Cannot login. wrong password."
        500:
          description: "Server error." "Database error"
  /internalapi/userlogout:
    post:
      summary: "User logout"
      responses:
        200:
          description: "admin's session has been deleted successfully."
          content:
            application/json:
            schema:
              type: "object"
              properties:
                username:
                  type: "string"
                  description: "Username of logged-out user."
        400:
          description: "Database error"
        401:
          description: "You do not have permission to log out this user."
        404:
          description: "Couldn\'t find entry"
        500:
          description: "something weird happened"
  /api/users:
    post:
      summary: "Create a new user (admin only)"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "User object that needs to be added to the users"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        200:
          description: "OK"
        400:
          description: "Cannot create user. ID might already exist. Also, make sure you provide the needed parameters"
        401:
          description: "You do not have permission to create users, or you did not provide the new user\'s password"
        500:
          description: "Server error!"
    put:
      summary: "Change a user password (self only)"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "New password for username"
        required: true
        schema:
          type: "object"
          properties:
            username:
              type: "string"
            pw:
              type: "string"
      responses:
        200:
          description: "Username's password has been succesfully updated."
        400:
          description: "Database error" "update failed. Please check you parameters"
        401:
          description: "You do not have permission to delete this user. Or you did not provide the needed parameters"
        404:
          description: "Entry does not exist"
        500:
          description: "Database error"
        599:
          description: "something weird happened"
    delete:
      summary: "Delete a user (admin only)"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Username to delete"
        required: true
        schema:
          type: object
          properties:
            username:
              type: string
              description: The username to be deleted.
      responses:
        200:
          description: "'username' has been deleted successfully."
        400:
          description: "Database error"
        401:
          description: "You do not have permission to delete this user."
        404:
          description: "Couldn't find entry"
        500:
          description: "something weird happened"
    get:
      summary: "Get the list of all users (admin only) if no query string parameters specified"
      parameters:
        - in: "query"
          name: "username"
          schema:
            type: "string"
          description: "Get the user with the given username"
      responses:
        200:
          description: "OK"
          content:
            application/json:
            schema:
              type: "object"
              properties:
                username:
                  type: "string"
                realname:
                  type: "string"
                adminPriv:
                  type: "integer"
        400:
          description: "The query string can only contain one username"
  /api/patients:
    get:
      summary: "Search patient"
      description: "If query string is not provided, then it returns all the patients. if query string "id={id}" is provided, then it returns patients with id containing "id""
      produces: 
      - "application/json"
      parameters:
        - in: "query"
          name: "id"
          schema:
            type: "string"
          description: "Get information for the patient(s) with IDs that contain id"
      responses:
        200:
          description: "Result"
          schema:
            type: "array"
            description: "All patients if no query string, patients with IDs containing `id` if query string"
            items:
              $ref: '#/definitions/Patient'
        400:
          description: "The query string can only have one parameter `id`"
    post:
      summary: "Create a patient"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          type: "object"
          properties:
            aliasId:
              type: "string"
            study:
              type: "string"
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  result:
                    type: "array"
                    description: "Id"
        400:
          description: "Cannot create patient. ID might already exist. Also, make sure you provide `aliasId` and `study` as keys."
    patch:
      summary: "Delete a patient (admin only)"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          type: "object"
          properties:
            aliasId:
              type: "string"
      responses:
        200:
          description: "`aliasId` has been deleted successfully."
        400:
          description: "Database error"
        401:
          description: "Sorry! Only admins are able to edit / delete data"
        404:
          description: "Couldn\'t find entry"
        500:
          description: "something weird happened"
    delete:
      summary: "Erase patient information"
      consumes:
      - "application/json"
      parameters:
      - in: "query"
        name: ""
        required: true
        schema:
          type: "object"
          properties:
            aliasId:
              type: "string"
      responses:
        200:
          description: "Erasure completed. Check for any data retreivable if needed."
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  result:
                    type: "string"
                    description: "Successful erasure"
        400:
          description: "No query found"
        403:
          description: "Sorry! Only admins are able to edit / delete data"
  /api/patientProfile/:id:
    get:
      summary: "Get patient information by id"
      description: "Get patient information by id"
      produces: 
      - "application/json"
      responses:
        200:
          description: "Result. Could be empty"
  /api/visit:
    get:
      summary: "Get all visits of a certain patient"
    post:
      summary: "Create a visit"
    delete:
      summary: "Delete a visit"
  /api/visit/data:
    post:
      summary:
    delete:
      summary:
  /api/test/data:
    post:
      summary:
    delete:
      summary:
  /api/clinicalEvent/data:
    post:
      summary:
    delete:
      summary:
  /api/demogdata/Demographic:
    post:
      summary: "Create Demographic"
    delete:
      summary: "Delete Demographic"
    put:
      summary: "Edit Demographic data"
  /api/demogdata/Immunisation:
    post:
      summary: "Create Immunisation"
    delete:
      summary: "Delete Immunisation"
    put:
      summary: "Edit Immunisation data"
  /api/demogdata/MedicalCondition:
    post:
      summary: "Create MedicalCondition"
    delete:
      summary: "Delete MedicalCondition"
    put:
      summary: "Edit MedicalCondition"
  /api/treatments:
    post:
      summary:
    put:
      summary:
    delete:
      summary:
    patch:
      summary:
  /api/treatments/interrupt:
    post:
      summary: "Create a treatment interruption"
      consumes:
        - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Treatment interruption object to be added to treatment information"
        required: true
        schema:
          $ref: "#/definitions/TreatmentInterruption"
      responses:
        200:
          description: "OK"
        400:
          description: "Missing information to proceed the request" "Couldn\'t create entry"
    delete:
      summary: "Delete a treatment interruption"
      consumes:
        - "application/json"
      responses:
        200:
          description: "OK"
        400:
          description: "Missing treatment interruption ID"
        401:
          description: "Unauthorized : You should be identified as an Administrator to do so."
        404:
          description: "Couldn't find entry"
  /api/clinicalEvents:
    post:
      summary:
    delete:
      summary:
  /api/available/visitFields:
    get:
      summary:
  /api/available/testFields:
    get:
      summary:
  /api/available/clinicalEvents:
    get:
      summary:
  /api/available/testTypes:
    get:
      summary:
definitions:
  Login:
    type: "object"
    properties:
      username:
        type: "string"
      pw:
        type: "string"      
  User:
    type: "object"
    properties:
      username:
        type: "string"
      pw:
        type: "string"
      isAdmin:
        type: "integer"
      realName:
        type: "string"
    xml:
      name: "User"
  Patient:
    type: "object"
    properties:
      patientId:
        type: "integer"
      aliasId:
        type: "string"
      study:
        type: "string"
      DOB:
        type: "date"
      gender:
        type: "integer"
  TreatmentInterruption:
    type: "object"
    properties:
      treatmentId:
        type: "integer"
      start_date:
        $ref: "#/definitions/Date"
      end_date:
        $ref: "#/definitions/Date"
      reason:
        type: "string"
  Date:
    type: "object"
    properties:
      day:
        type: "integer"
      month:
        type: "integer"
      year:
        type: "integer"

      


  